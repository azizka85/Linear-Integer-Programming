from scipy.optimize import linprog
import numpy as np

# Коэффициенты целевой функции 
c = [0, 0, 0, 0, 0, 0, 0, 0, 0, -1]  #максимизируем поток, поэтому коэффициент -1 для v

# Матрица 
A_eq = np.array([
    [1, 1, 0, 0, 0, 0, 0, 0, 0, -1],  # Уравнение для исходного узла s (x12 + x13 - v = 0)
    [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # Уравнение для ребра (x25 − x12 − x32 − x42 = 0)
    [0, 0, 1, 0, -1, 0, 0, 0, 0, 0],  # Уравнение для ребра (x32 + x34 − x13 = 0)
    [0, 0, 0, 0, 1, 1, -1, 0, 0, 0],  # Уравнение для ребра (x42 + x45 + x46 − x34 = 0)
    [0, -1, 0, 0, 0, 0, 0, 1, 0, 0],  # Уравнение для ребра (x56 − x25 − x45 = 0)
    [0, 0, 0, 0, 0, 0, -1, -1, 0, 1]   # Уравнение для стока t (-x46 − x56 + v = 0)
])

# Правая часть ограничений 
b_eq = np.array([0, 0, 0, 0, 0, 0])

# Границы переменных (bounds)
bounds = [(0, 15), (0, 30), (0, 40), (0, 25), (0, 40), (0, 20), (0, 45), (0, 35), (0, 25), (0, None)] 


res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds)

print("Максимальный поток (v):", -res.fun)  # Поскольку мы минимизируем (-1*v), то берем отрицательное значение
print("Потоки по рёбрам (x_ij):", res.x[:-1])  # Исключаем последний элемент, который соответствует переменной v
